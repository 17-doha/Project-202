@page
@model Project_DB.Pages.Rating_SuccessModel
@{
}
<html>
    <head>
    <script src=https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100vh;
        }

        .container-rating {
            position: relative; /* Ensure relative positioning for z-index to work */
            text-align: center;
            background-color: #fff;
            padding: 20px;
            border-radius: 50px;
            box-shadow: 0 0 50px rgba(0, 0, 0, 0.1);
            height: 150px;
            width: 800px;
            z-index: 1; /* Set z-index to ensure the text is above the canvas */
        }


        h1 {
            color: #333;
            z-index: 2; /* Set z-index higher than the canvas */
            position: relative; /* Ensure relative positioning for z-index to work */
        }

        h2 {
            color: #555;
        }

        * {
            box-sizing: border-box;
        }

        .text {
            font-family: "Poppins", sans-serif;
            position: absolute;
            transform: translate(-50%, -50%);
            left: 50%;
            top: 50%;
            color: #ffffff;
            text-align: center;
            letter-spacing: 0.2em;
            z-index: 2; /* Set z-index higher than the canvas */
        }

        h1 {
            font-size: 3em;
            font-weight: 600;
        }

        h3 {
            font-weight: 400;
        }
    </style>
</head>
<body>   
    <div class="container-rating text">
        <h1>Rating was Successful</h1>
        <h2>Your Rating: @Model.rating</h2>
    </div>
    <canvas id="canvas"></canvas>
    <script>
        let canvas = document.getElementById("canvas");
        let context = canvas.getContext("2d");
        let width = window.innerWidth;
        let height = window.innerHeight;
        let particles = [];
        let particleSettings = {
            count: 500,
            gravity: 0.05,
            wave: 0,
        };

        window.requestAnimationFrame =
            window.requestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            window.mozRequesAnimationFrame ||
            window.oRequestAnimationFrame ||
            window.msRequestAnimationFrame ||
            function (callback) {
                window.setTimeout(callback, 1000 / 60);
            };

        // Random number between range
        function randomNumberGenerator(min, max) {
            return Math.random() * (max - min) + min;
        }

        // Creates Confetti (particles)
        function createConfetti() {
            while (particles.length < particleSettings.count) {
                let particle = new Particle();

                // Random colors
                particle.color = `rgb( ${randomNumberGenerator(
                    0,
                    255
                )}, ${randomNumberGenerator(0, 255)}, ${randomNumberGenerator(0, 255)}`;
                // Store particles
                particles.push(particle);
            }
        }

        // Starts the confetti
        const startConfetti = () => {
            context.clearRect(0, 0, window.innerWidth, window.innerHeight);
            createConfetti();
            for (let i in particles) {
                // Movement and shaking effect
                particleSettings.wave += 0.4;
                particles[i].tiltAngle += randomNumberGenerator(0.01, 2);
                particles[i].y +=
                    (Math.sin(particleSettings.wave) +
                        particles[i].area +
                        particleSettings.gravity) *
                    0.2;
                particles[i].tilt = Math.cos(particles[i].tiltAngle) * 0.3;
                // Draw the particle on screen
                particles[i].draw();
                // If particle has crossed the screen height
                if (particles[i].y > height) {
                    particles[i] = new Particle();
                    // Random colors
                    particles[i].color = `rgb( ${randomNumberGenerator(
                        0,
                        255
                    )}, ${randomNumberGenerator(0, 255)}, ${randomNumberGenerator(0, 255)}`;
                }
            }
            animationTimer = requestAnimationFrame(startConfetti);
        };

        function Particle() {
            this.x = Math.random() * width;
            this.y = Math.random() * height - height;
            this.area = randomNumberGenerator(10, 15);
            this.tilt = randomNumberGenerator(-4, 4);
            this.tiltAngle = 0;
        }

        // Method associated with particle
        Particle.prototype = {
            draw: function () {
                context.beginPath();
                context.lineWidth = this.area;
                context.strokeStyle = this.color;
                this.x = this.x + this.tilt;
                context.moveTo(this.x + this.area / 2, this.y);
                context.lineTo(this.x, this.y + this.tilt + this.area / 2);
                context.stroke();
            },
        };

        window.onload = () => {
            canvas.width = width;
            canvas.height = height;
            window.requestAnimationFrame(startConfetti);
        };
    </script>
</body>
</html>







